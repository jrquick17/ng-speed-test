import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
let SpeedTestService = class SpeedTestService {
    constructor() {
    }
    getSpeed() {
        return new Observable((observer) => {
            window.setTimeout(() => {
                const imageAddr = 'https://ng-speed-test.jrquick.com/assets/internet-speed-image.jpg';
                let startTime, endTime;
                const download = new Image();
                download.onload = () => {
                    endTime = (new Date()).getTime();
                    const downloadSize = 4995374;
                    const duration = (endTime - startTime) / 1000;
                    const bitsLoaded = downloadSize * 8;
                    const speedBps = (bitsLoaded / duration).toFixed(2);
                    const speedKbps = (speedBps / 1024).toFixed(2);
                    const speedMbps = (speedKbps / 1024).toFixed(2);
                    observer.next(speedMbps);
                    observer.complete();
                };
                download.onerror = () => {
                    observer.next(false);
                    observer.complete();
                };
                startTime = (new Date()).getTime();
                const cacheBuster = '?nnn=' + startTime;
                download.src = imageAddr + cacheBuster;
            }, 1);
        });
    }
};
SpeedTestService = tslib_1.__decorate([
    Injectable()
], SpeedTestService);
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9zcGVlZC10ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUdoQyxJQUFhLGdCQUFnQixHQUE3QixNQUFhLGdCQUFnQjtJQUMzQjtJQUVBLENBQUM7SUFFRCxRQUFRO1FBQ04sT0FBTyxJQUFJLFVBQVUsQ0FDbkIsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNYLE1BQU0sQ0FBQyxVQUFVLENBQ2YsR0FBRyxFQUFFO2dCQUNILE1BQU0sU0FBUyxHQUFHLG1FQUFtRSxDQUFDO2dCQUV0RixJQUFJLFNBQVMsRUFBRSxPQUFPLENBQUM7Z0JBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBRTdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsR0FBRyxFQUFFO29CQUNyQixPQUFPLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7b0JBRWpDLE1BQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQztvQkFFN0IsTUFBTSxRQUFRLEdBQUcsQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDO29CQUU5QyxNQUFNLFVBQVUsR0FBRyxZQUFZLEdBQUcsQ0FBQyxDQUFDO29CQUVwQyxNQUFNLFFBQVEsR0FBTyxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ3hELE1BQU0sU0FBUyxHQUFPLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFbkQsTUFBTSxTQUFTLEdBQUcsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUVoRCxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO29CQUN6QixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQztnQkFFRixRQUFRLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtvQkFDdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUM7Z0JBRUYsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUVuQyxNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUN4QyxRQUFRLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7WUFDekMsQ0FBQyxFQUNELENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0YsQ0FBQTtBQWhEWSxnQkFBZ0I7SUFENUIsVUFBVSxFQUFFO0dBQ0EsZ0JBQWdCLENBZ0Q1QjtTQWhEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BlZWRUZXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBnZXRTcGVlZCgpOk9ic2VydmFibGU8c3RyaW5nfGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoXG4gICAgICAob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VBZGRyID0gJ2h0dHBzOi8vbmctc3BlZWQtdGVzdC5qcnF1aWNrLmNvbS9hc3NldHMvaW50ZXJuZXQtc3BlZWQtaW1hZ2UuanBnJztcblxuICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSwgZW5kVGltZTtcbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIGRvd25sb2FkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgZW5kVGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRTaXplID0gNDk5NTM3NDtcblxuICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IChlbmRUaW1lIC0gc3RhcnRUaW1lKSAvIDEwMDA7XG5cbiAgICAgICAgICAgICAgY29uc3QgYml0c0xvYWRlZCA9IGRvd25sb2FkU2l6ZSAqIDg7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRCcHM6YW55ID0gKGJpdHNMb2FkZWQgLyBkdXJhdGlvbikudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRLYnBzOmFueSA9IChzcGVlZEJwcyAvIDEwMjQpLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRNYnBzID0gKHNwZWVkS2JwcyAvIDEwMjQpLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzcGVlZE1icHMpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZG93bmxvYWQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChmYWxzZSk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBjYWNoZUJ1c3RlciA9ICc/bm5uPScgKyBzdGFydFRpbWU7XG4gICAgICAgICAgICBkb3dubG9hZC5zcmMgPSBpbWFnZUFkZHIgKyBjYWNoZUJ1c3RlcjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIDFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import { SpeedDetailsModel } from '../models/speed-details.model';
let SpeedTestService = class SpeedTestService {
    constructor() {
        this._applyCacheBuster = (path) => path + '?nnn=' + Math.random();
    }
    getBps(fileDetails, iterations) {
        return new Observable((observer) => {
            window.setTimeout(() => {
                let filePath = 'https://ng-speed-test.jrquick.com/assets/1mb.jpg';
                let fileSize = 1197292;
                let shouldBustCache = true;
                // 408949 // 500kb
                // 1197292 // 1mb
                // 4952221 // 5mb
                // 13848150 // 15mb
                if (typeof fileDetails !== 'undefined') {
                    if (typeof fileDetails.path === 'undefined') {
                        console.error('ng-speed-test: File path is missing.');
                    }
                    else {
                        filePath = fileDetails.path;
                    }
                    if (typeof fileDetails.shouldBustCache !== 'undefined') {
                        shouldBustCache = fileDetails.shouldBustCache === true;
                    }
                    if (typeof fileDetails.size === 'undefined') {
                        console.error('ng-speed-test: File size is missing.');
                    }
                    else {
                        fileSize = fileDetails.size;
                    }
                }
                if (shouldBustCache) {
                    filePath = this._applyCacheBuster(filePath);
                }
                if (typeof iterations === 'undefined') {
                    iterations = 1;
                }
                const speedDetails = new SpeedDetailsModel(fileSize);
                const download = new Image();
                download.onload = (a) => {
                    speedDetails.end();
                    observer.next(speedDetails.speedBps);
                    observer.complete();
                };
                download.onerror = () => {
                    observer.next(null);
                    observer.complete();
                };
                speedDetails.start();
                download.src = filePath;
            }, 1);
        });
    }
    getKbps() {
        return this.getBps().pipe(map((bps) => {
            return bps / 1024;
        }));
    }
    getMbps() {
        return this.getKbps().pipe(map((kpbs) => {
            return kpbs / 1024;
        }));
    }
};
SpeedTestService = tslib_1.__decorate([
    Injectable()
], SpeedTestService);
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9zcGVlZC10ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFVBQVUsRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFbkMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFHaEUsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFDM0I7UUFJUSxzQkFBaUIsR0FBRyxDQUFDLElBQVcsRUFBVSxFQUFFLENBQUMsSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFGcEYsQ0FBQztJQUlELE1BQU0sQ0FBQyxXQUE2QixFQUFFLFVBQWtCO1FBQ3RELE9BQU8sSUFBSSxVQUFVLENBQ25CLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDWCxNQUFNLENBQUMsVUFBVSxDQUNmLEdBQUcsRUFBRTtnQkFDSCxJQUFJLFFBQVEsR0FBRyxrREFBa0QsQ0FBQztnQkFDbEUsSUFBSSxRQUFRLEdBQUcsT0FBTyxDQUFDO2dCQUN2QixJQUFJLGVBQWUsR0FBRyxJQUFJLENBQUM7Z0JBRTNCLGtCQUFrQjtnQkFDbEIsaUJBQWlCO2dCQUNqQixpQkFBaUI7Z0JBQ2pCLG1CQUFtQjtnQkFFbkIsSUFBSSxPQUFPLFdBQVcsS0FBSyxXQUFXLEVBQUU7b0JBQ3RDLElBQUksT0FBTyxXQUFXLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTt3QkFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO3FCQUN2RDt5QkFBTTt3QkFDTCxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztxQkFDN0I7b0JBRUQsSUFBSSxPQUFPLFdBQVcsQ0FBQyxlQUFlLEtBQUssV0FBVyxFQUFFO3dCQUN0RCxlQUFlLEdBQUcsV0FBVyxDQUFDLGVBQWUsS0FBSyxJQUFJLENBQUM7cUJBQ3hEO29CQUVELElBQUksT0FBTyxXQUFXLENBQUMsSUFBSSxLQUFLLFdBQVcsRUFBRTt3QkFDM0MsT0FBTyxDQUFDLEtBQUssQ0FBQyxzQ0FBc0MsQ0FBQyxDQUFDO3FCQUN2RDt5QkFBTTt3QkFDTCxRQUFRLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztxQkFDN0I7aUJBQ0Y7Z0JBRUQsSUFBSSxlQUFlLEVBQUU7b0JBQ25CLFFBQVEsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7aUJBQzdDO2dCQUVELElBQUksT0FBTyxVQUFVLEtBQUssV0FBVyxFQUFFO29CQUNyQyxVQUFVLEdBQUcsQ0FBQyxDQUFDO2lCQUNoQjtnQkFFRCxNQUFNLFlBQVksR0FBRyxJQUFJLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxDQUFDO2dCQUVyRCxNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUU3QixRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ3RCLFlBQVksQ0FBQyxHQUFHLEVBQUUsQ0FBQztvQkFFbkIsUUFBUSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3JDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDO2dCQUVGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO29CQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNwQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQztnQkFFRixZQUFZLENBQUMsS0FBSyxFQUFFLENBQUM7Z0JBRXJCLFFBQVEsQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDO1lBQzFCLENBQUMsRUFDRCxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQ3ZCLEdBQUcsQ0FDRCxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ04sT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLENBQUMsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUNELENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDUCxPQUFPLElBQUksR0FBRyxJQUFJLENBQUM7UUFDckIsQ0FBQyxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBNUZZLGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7R0FDQSxnQkFBZ0IsQ0E0RjVCO1NBNUZZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3Vic2NyaWJlcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtGaWxlRGV0YWlsc01vZGVsfSBmcm9tICcuLi9tb2RlbHMvZmlsZS1kZXRhaWxzLm1vZGVsJztcbmltcG9ydCB7U3BlZWREZXRhaWxzTW9kZWx9IGZyb20gJy4uL21vZGVscy9zcGVlZC1kZXRhaWxzLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNwZWVkVGVzdFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcHJpdmF0ZSBfYXBwbHlDYWNoZUJ1c3RlciA9IChwYXRoOnN0cmluZyk6IHN0cmluZyA9PiBwYXRoICsgJz9ubm49JyArIE1hdGgucmFuZG9tKCk7XG5cbiAgZ2V0QnBzKGZpbGVEZXRhaWxzPzpGaWxlRGV0YWlsc01vZGVsLCBpdGVyYXRpb25zPzpudW1iZXIpOk9ic2VydmFibGU8bnVtYmVyfG51bGw+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoXG4gICAgICAob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGZpbGVQYXRoID0gJ2h0dHBzOi8vbmctc3BlZWQtdGVzdC5qcnF1aWNrLmNvbS9hc3NldHMvMW1iLmpwZyc7XG4gICAgICAgICAgICBsZXQgZmlsZVNpemUgPSAxMTk3MjkyO1xuICAgICAgICAgICAgbGV0IHNob3VsZEJ1c3RDYWNoZSA9IHRydWU7XG5cbiAgICAgICAgICAgIC8vIDQwODk0OSAvLyA1MDBrYlxuICAgICAgICAgICAgLy8gMTE5NzI5MiAvLyAxbWJcbiAgICAgICAgICAgIC8vIDQ5NTIyMjEgLy8gNW1iXG4gICAgICAgICAgICAvLyAxMzg0ODE1MCAvLyAxNW1iXG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZURldGFpbHMgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZURldGFpbHMucGF0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCduZy1zcGVlZC10ZXN0OiBGaWxlIHBhdGggaXMgbWlzc2luZy4nKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCA9IGZpbGVEZXRhaWxzLnBhdGg7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbGVEZXRhaWxzLnNob3VsZEJ1c3RDYWNoZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBzaG91bGRCdXN0Q2FjaGUgPSBmaWxlRGV0YWlscy5zaG91bGRCdXN0Q2FjaGUgPT09IHRydWU7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbGVEZXRhaWxzLnNpemUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignbmctc3BlZWQtdGVzdDogRmlsZSBzaXplIGlzIG1pc3NpbmcuJyk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmlsZVNpemUgPSBmaWxlRGV0YWlscy5zaXplO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRCdXN0Q2FjaGUpIHtcbiAgICAgICAgICAgICAgZmlsZVBhdGggPSB0aGlzLl9hcHBseUNhY2hlQnVzdGVyKGZpbGVQYXRoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRpb25zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICBpdGVyYXRpb25zID0gMTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc3BlZWREZXRhaWxzID0gbmV3IFNwZWVkRGV0YWlsc01vZGVsKGZpbGVTaXplKTtcblxuICAgICAgICAgICAgY29uc3QgZG93bmxvYWQgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgZG93bmxvYWQub25sb2FkID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgc3BlZWREZXRhaWxzLmVuZCgpO1xuXG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoc3BlZWREZXRhaWxzLnNwZWVkQnBzKTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRvd25sb2FkLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQobnVsbCk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzcGVlZERldGFpbHMuc3RhcnQoKTtcblxuICAgICAgICAgICAgZG93bmxvYWQuc3JjID0gZmlsZVBhdGg7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIGdldEticHMoKTpPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmdldEJwcygpLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgIChicHMpID0+IHtcbiAgICAgICAgICByZXR1cm4gYnBzIC8gMTAyNDtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cblxuICBnZXRNYnBzKCk6T2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRLYnBzKCkucGlwZShcbiAgICAgIG1hcChcbiAgICAgICAgKGtwYnMpID0+IHtcbiAgICAgICAgICByZXR1cm4ga3BicyAvIDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
let SpeedTestService = class SpeedTestService {
    constructor() {
    }
    getBps() {
        return new Observable((observer) => {
            window.setTimeout(() => {
                const imageAddr = 'https://ng-speed-test.jrquick.com/assets/internet-speed-image.jpg';
                let startTime, endTime;
                const download = new Image();
                download.onload = (a) => {
                    endTime = (new Date()).getTime();
                    const downloadSize = 4995374;
                    const duration = (endTime - startTime) / 1000;
                    const bitsLoaded = downloadSize * 8;
                    const speedBps = bitsLoaded / duration;
                    observer.next(speedBps);
                    observer.complete();
                };
                download.onerror = () => {
                    observer.next(-1);
                    observer.complete();
                };
                startTime = (new Date()).getTime();
                const cacheBuster = '?nnn=' + startTime;
                download.src = imageAddr + cacheBuster;
            }, 1);
        });
    }
    getKbps() {
        return this.getBps().pipe(map((bps) => {
            return bps / 1024;
        }));
    }
    getMbps() {
        return this.getKbps().pipe(map((kpbs) => {
            return kpbs / 1024;
        }));
    }
};
SpeedTestService = tslib_1.__decorate([
    Injectable()
], SpeedTestService);
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9zcGVlZC10ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkMsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFDM0I7SUFFQSxDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxVQUFVLENBQ25CLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDWCxNQUFNLENBQUMsVUFBVSxDQUNmLEdBQUcsRUFBRTtnQkFDSCxNQUFNLFNBQVMsR0FBRyxtRUFBbUUsQ0FBQztnQkFFdEYsSUFBSSxTQUFTLEVBQUUsT0FBTyxDQUFDO2dCQUN2QixNQUFNLFFBQVEsR0FBRyxJQUFJLEtBQUssRUFBRSxDQUFDO2dCQUU3QixRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ3RCLE9BQU8sR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFFakMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDO29CQUU3QixNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7b0JBRTlDLE1BQU0sVUFBVSxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7b0JBRXBDLE1BQU0sUUFBUSxHQUFHLFVBQVUsR0FBRyxRQUFRLENBQUM7b0JBRXZDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3hCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDO2dCQUVGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO29CQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQ2xCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDO2dCQUVGLFNBQVMsR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztnQkFFbkMsTUFBTSxXQUFXLEdBQUcsT0FBTyxHQUFHLFNBQVMsQ0FBQztnQkFDeEMsUUFBUSxDQUFDLEdBQUcsR0FBRyxTQUFTLEdBQUcsV0FBVyxDQUFDO1lBQ3pDLENBQUMsRUFDRCxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU87UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQ3ZCLEdBQUcsQ0FDRCxDQUFDLEdBQUcsRUFBRSxFQUFFO1lBQ04sT0FBTyxHQUFHLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLENBQUMsQ0FDRixDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDeEIsR0FBRyxDQUNELENBQUMsSUFBSSxFQUFFLEVBQUU7WUFDUCxPQUFPLElBQUksR0FBRyxJQUFJLENBQUM7UUFDckIsQ0FBQyxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBakVZLGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7R0FDQSxnQkFBZ0IsQ0FpRTVCO1NBakVZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BlZWRUZXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBnZXRCcHMoKTpPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShcbiAgICAgIChvYnNlcnZlcikgPT4ge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUFkZHIgPSAnaHR0cHM6Ly9uZy1zcGVlZC10ZXN0LmpycXVpY2suY29tL2Fzc2V0cy9pbnRlcm5ldC1zcGVlZC1pbWFnZS5qcGcnO1xuXG4gICAgICAgICAgICBsZXQgc3RhcnRUaW1lLCBlbmRUaW1lO1xuICAgICAgICAgICAgY29uc3QgZG93bmxvYWQgPSBuZXcgSW1hZ2UoKTtcblxuICAgICAgICAgICAgZG93bmxvYWQub25sb2FkID0gKGEpID0+IHtcbiAgICAgICAgICAgICAgZW5kVGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRTaXplID0gNDk5NTM3NDtcblxuICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IChlbmRUaW1lIC0gc3RhcnRUaW1lKSAvIDEwMDA7XG5cbiAgICAgICAgICAgICAgY29uc3QgYml0c0xvYWRlZCA9IGRvd25sb2FkU2l6ZSAqIDg7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRCcHMgPSBiaXRzTG9hZGVkIC8gZHVyYXRpb247XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzcGVlZEJwcyk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkb3dubG9hZC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KC0xKTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHN0YXJ0VGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlQnVzdGVyID0gJz9ubm49JyArIHN0YXJ0VGltZTtcbiAgICAgICAgICAgIGRvd25sb2FkLnNyYyA9IGltYWdlQWRkciArIGNhY2hlQnVzdGVyO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgMVxuICAgICAgICApO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBnZXRLYnBzKCk6T2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gdGhpcy5nZXRCcHMoKS5waXBlKFxuICAgICAgbWFwKFxuICAgICAgICAoYnBzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGJwcyAvIDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgZ2V0TWJwcygpOk9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0S2JwcygpLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgIChrcGJzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGtwYnMgLyAxMDI0O1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuIl19
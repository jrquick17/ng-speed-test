import { Injectable } from '@angular/core';
import { Observable, of } from 'rxjs';
import { mergeMap, map } from 'rxjs/operators';
import { FileDetailsModel } from '../models/file-details.model';
import { SpeedDetailsModel } from '../models/speed-details.model';
export class SpeedTestService {
    constructor() {
        this._applyCacheBuster = (path) => path + '?nnn=' + Math.random();
    }
    _download(iterations, fileDetails, allDetails) {
        return new Observable((observer) => {
            const newSpeedDetails = new SpeedDetailsModel(fileDetails.size);
            const download = new Image();
            download.onload = () => {
                newSpeedDetails.end();
                observer.next(newSpeedDetails);
                observer.complete();
            };
            download.onerror = () => {
                observer.next(null);
                observer.complete();
            };
            let filePath = fileDetails.path;
            if (fileDetails.shouldBustCache) {
                filePath = this._applyCacheBuster(filePath);
            }
            newSpeedDetails.start();
            download.src = filePath;
        }).pipe(mergeMap((newSpeedDetails) => {
            if (newSpeedDetails === null) {
                console.error('ng-speed-test: Error downloading file.');
            }
            else {
                if (typeof allDetails === 'undefined') {
                    allDetails = [];
                }
                allDetails.push(newSpeedDetails);
            }
            if (typeof iterations === 'undefined') {
                iterations = 3;
            }
            if (iterations === 1) {
                const count = allDetails.length;
                let total = 0;
                for (let i = 0; i < count; i++) {
                    total += allDetails[i].speedBps;
                }
                const speedBps = total / count;
                return of(speedBps);
            }
            else {
                return this._download(--iterations, fileDetails, allDetails);
            }
        }));
    }
    getBps(iterations, fileDetails) {
        return new Observable((observer) => {
            window.setTimeout(() => {
                if (typeof fileDetails === 'undefined') {
                    fileDetails = new FileDetailsModel();
                }
                else {
                    if (typeof fileDetails.path === 'undefined') {
                        console.error('ng-speed-test: File path is missing.');
                        return null;
                    }
                    if (typeof fileDetails.size === 'undefined') {
                        console.error('ng-speed-test: File size is missing.');
                        return null;
                    }
                    if (typeof fileDetails.shouldBustCache === 'undefined') {
                        fileDetails.shouldBustCache = true;
                    }
                    else {
                        fileDetails.shouldBustCache = fileDetails.shouldBustCache === true;
                    }
                }
                this._download(iterations, fileDetails).subscribe((speedBps) => {
                    observer.next(speedBps);
                    observer.complete();
                });
            }, 1);
        });
    }
    getKbps(iterations, fileDetails) {
        return this.getBps(iterations, fileDetails).pipe(map((bps) => {
            return bps / 1024;
        }));
    }
    getMbps(iterations, fileDetails) {
        return this.getKbps(iterations, fileDetails).pipe(map((kpbs) => {
            return kpbs / 1024;
        }));
    }
}
SpeedTestService.decorators = [
    { type: Injectable }
];
SpeedTestService.ctorParameters = () => [];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL2FwcC9zZXJ2aWNlcy9zcGVlZC10ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNwQyxPQUFPLEVBQUMsUUFBUSxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBQzlELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBR2hFLE1BQU0sT0FBTyxnQkFBZ0I7SUFDM0I7UUFJUSxzQkFBaUIsR0FBRyxDQUFDLElBQVcsRUFBVSxFQUFFLENBQUMsSUFBSSxHQUFHLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFGcEYsQ0FBQztJQUlPLFNBQVMsQ0FBQyxVQUFrQixFQUFFLFdBQTZCLEVBQUUsVUFBK0I7UUFDbEcsT0FBTyxJQUFJLFVBQVUsQ0FDbkIsQ0FBQyxRQUFRLEVBQUUsRUFBRTtZQUNYLE1BQU0sZUFBZSxHQUFHLElBQUksaUJBQWlCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRWhFLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7WUFFN0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7Z0JBQ3JCLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFFdEIsUUFBUSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztnQkFDL0IsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3RCLENBQUMsQ0FBQztZQUVGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO2dCQUN0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RUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQ0YsQ0FBQztZQUNKLENBQUMsRUFDRCxDQUFDLENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyxVQUFrQixFQUFFLFdBQTZCO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM5QyxHQUFHLENBQ0QsQ0FBQyxHQUFHLEVBQUUsRUFBRTtZQUNOLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQztRQUNwQixDQUFDLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sQ0FBQyxVQUFrQixFQUFFLFdBQTZCO1FBQ3ZELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUMvQyxHQUFHLENBQ0QsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyQixDQUFDLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7O1lBbElGLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge09ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWVyZ2VNYXAsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtGaWxlRGV0YWlsc01vZGVsfSBmcm9tICcuLi9tb2RlbHMvZmlsZS1kZXRhaWxzLm1vZGVsJztcbmltcG9ydCB7U3BlZWREZXRhaWxzTW9kZWx9IGZyb20gJy4uL21vZGVscy9zcGVlZC1kZXRhaWxzLm1vZGVsJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNwZWVkVGVzdFNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHtcblxuICB9XG5cbiAgcHJpdmF0ZSBfYXBwbHlDYWNoZUJ1c3RlciA9IChwYXRoOnN0cmluZyk6IHN0cmluZyA9PiBwYXRoICsgJz9ubm49JyArIE1hdGgucmFuZG9tKCk7XG5cbiAgcHJpdmF0ZSBfZG93bmxvYWQoaXRlcmF0aW9ucz86bnVtYmVyLCBmaWxlRGV0YWlscz86RmlsZURldGFpbHNNb2RlbCwgYWxsRGV0YWlscz86U3BlZWREZXRhaWxzTW9kZWxbXSk6T2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGU8U3BlZWREZXRhaWxzTW9kZWw+KFxuICAgICAgKG9ic2VydmVyKSA9PiB7XG4gICAgICAgIGNvbnN0IG5ld1NwZWVkRGV0YWlscyA9IG5ldyBTcGVlZERldGFpbHNNb2RlbChmaWxlRGV0YWlscy5zaXplKTtcblxuICAgICAgICBjb25zdCBkb3dubG9hZCA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgIGRvd25sb2FkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICBuZXdTcGVlZERldGFpbHMuZW5kKCk7XG5cbiAgICAgICAgICBvYnNlcnZlci5uZXh0KG5ld1NwZWVkRGV0YWlscyk7XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBkb3dubG9hZC5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgIG9ic2VydmVyLm5leHQobnVsbCk7XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgZmlsZVBhdGggPSBmaWxlRGV0YWlscy5wYXRoO1xuICAgICAgICBpZiAoZmlsZURldGFpbHMuc2hvdWxkQnVzdENhY2hlKSB7XG4gICAgICAgICAgZmlsZVBhdGggPSB0aGlzLl9hcHBseUNhY2hlQnVzdGVyKGZpbGVQYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5ld1NwZWVkRGV0YWlscy5zdGFydCgpO1xuXG4gICAgICAgIGRvd25sb2FkLnNyYyA9IGZpbGVQYXRoO1xuICAgICAgfVxuICAgICkucGlwZShcbiAgICAgIG1lcmdlTWFwKFxuICAgICAgICAobmV3U3BlZWREZXRhaWxzOlNwZWVkRGV0YWlsc01vZGVsfG51bGwpID0+IHtcbiAgICAgICAgICBpZiAobmV3U3BlZWREZXRhaWxzID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCduZy1zcGVlZC10ZXN0OiBFcnJvciBkb3dubG9hZGluZyBmaWxlLicpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFsbERldGFpbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGFsbERldGFpbHMgPSBbXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYWxsRGV0YWlscy5wdXNoKG5ld1NwZWVkRGV0YWlscyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKHR5cGVvZiBpdGVyYXRpb25zID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgaXRlcmF0aW9ucyA9IDM7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgaWYgKGl0ZXJhdGlvbnMgPT09IDEpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gYWxsRGV0YWlscy5sZW5ndGg7XG4gICAgICAgICAgICBsZXQgdG90YWwgPSAwO1xuXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgdG90YWwgKz0gYWxsRGV0YWlsc1tpXS5zcGVlZEJwcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc3BlZWRCcHMgPSB0b3RhbCAvIGNvdW50O1xuXG4gICAgICAgICAgICByZXR1cm4gb2Yoc3BlZWRCcHMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fZG93bmxvYWQoLS1pdGVyYXRpb25zLCBmaWxlRGV0YWlscywgYWxsRGV0YWlscyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGdldEJwcyhpdGVyYXRpb25zPzpudW1iZXIsIGZpbGVEZXRhaWxzPzpGaWxlRGV0YWlsc01vZGVsKTpPYnNlcnZhYmxlPG51bWJlcnxudWxsPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKFxuICAgICAgKG9ic2VydmVyKSA9PiB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZURldGFpbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgIGZpbGVEZXRhaWxzID0gbmV3IEZpbGVEZXRhaWxzTW9kZWwoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgZmlsZURldGFpbHMucGF0aCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKCduZy1zcGVlZC10ZXN0OiBGaWxlIHBhdGggaXMgbWlzc2luZy4nKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBmaWxlRGV0YWlscy5zaXplID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ25nLXNwZWVkLXRlc3Q6IEZpbGUgc2l6ZSBpcyBtaXNzaW5nLicpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAodHlwZW9mIGZpbGVEZXRhaWxzLnNob3VsZEJ1c3RDYWNoZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICBmaWxlRGV0YWlscy5zaG91bGRCdXN0Q2FjaGUgPSB0cnVlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbGVEZXRhaWxzLnNob3VsZEJ1c3RDYWNoZSA9IGZpbGVEZXRhaWxzLnNob3VsZEJ1c3RDYWNoZSA9PT0gdHJ1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9kb3dubG9hZChpdGVyYXRpb25zLCBmaWxlRGV0YWlscykuc3Vic2NyaWJlKFxuICAgICAgICAgICAgICAoc3BlZWRCcHMpID0+IHtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHNwZWVkQnBzKTtcbiAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgMVxuICAgICAgICApO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBnZXRLYnBzKGl0ZXJhdGlvbnM/Om51bWJlciwgZmlsZURldGFpbHM/OkZpbGVEZXRhaWxzTW9kZWwpOk9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QnBzKGl0ZXJhdGlvbnMsIGZpbGVEZXRhaWxzKS5waXBlKFxuICAgICAgbWFwKFxuICAgICAgICAoYnBzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGJwcyAvIDEwMjQ7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgZ2V0TWJwcyhpdGVyYXRpb25zPzpudW1iZXIsIGZpbGVEZXRhaWxzPzpGaWxlRGV0YWlsc01vZGVsKTpPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmdldEticHMoaXRlcmF0aW9ucywgZmlsZURldGFpbHMpLnBpcGUoXG4gICAgICBtYXAoXG4gICAgICAgIChrcGJzKSA9PiB7XG4gICAgICAgICAgcmV0dXJuIGtwYnMgLyAxMDI0O1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuIl19
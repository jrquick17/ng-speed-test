import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';
let SpeedTestService = class SpeedTestService {
    constructor() {
    }
    getBps() {
        return new Observable((observer) => {
            window.setTimeout(() => {
                // const imageAddr = 'https://ng-speed-test.jrquick.com/assets/internet-speed-image.jpg';
                const imageAddr = 'https://webapp.uic-chp.org/internet-speed-image.jpg';
                let startTime, endTime;
                const download = new Image();
                download.onload = (a) => {
                    endTime = (new Date()).getTime();
                    const downloadSize = 4995374;
                    const duration = (endTime - startTime) / 1000;
                    const bitsLoaded = downloadSize * 8;
                    const speedBps = bitsLoaded / duration;
                    observer.next(speedBps);
                    observer.complete();
                };
                download.onerror = () => {
                    observer.next(-1);
                    observer.complete();
                };
                startTime = (new Date()).getTime();
                const cacheBuster = '?nnn=' + startTime;
                download.src = imageAddr + cacheBuster;
            }, 1);
        });
    }
    getKbps() {
        return this.getBps().pipe(map((bps) => {
            return bps / 1024;
        }));
    }
    getMbps() {
        return this.getKbps().pipe(map((kpbs) => {
            return kpbs / 1024;
        }));
    }
};
SpeedTestService = tslib_1.__decorate([
    Injectable()
], SpeedTestService);
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbImFwcC9zZXJ2aWNlcy9zcGVlZC10ZXN0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHbkMsSUFBYSxnQkFBZ0IsR0FBN0IsTUFBYSxnQkFBZ0I7SUFDM0I7SUFFQSxDQUFDO0lBRUQsTUFBTTtRQUNKLE9BQU8sSUFBSSxVQUFVLENBQ25CLENBQUMsUUFBUSxFQUFFLEVBQUU7WUFDWCxNQUFNLENBQUMsVUFBVSxDQUNmLEdBQUcsRUFBRTtnQkFDSCx5RkFBeUY7Z0JBQ3pGLE1BQU0sU0FBUyxHQUFHLHFEQUFxRCxDQUFDO2dCQUV4RSxJQUFJLFNBQVMsRUFBRSxPQUFPLENBQUM7Z0JBQ3ZCLE1BQU0sUUFBUSxHQUFHLElBQUksS0FBSyxFQUFFLENBQUM7Z0JBRTdCLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtvQkFDdEIsT0FBTyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUVqQyxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7b0JBRTdCLE1BQU0sUUFBUSxHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFFOUMsTUFBTSxVQUFVLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztvQkFFcEMsTUFBTSxRQUFRLEdBQUcsVUFBVSxHQUFHLFFBQVEsQ0FBQztvQkFFdkMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDeEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUM7Z0JBRUYsUUFBUSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUU7b0JBQ3RCLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDbEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUM7Z0JBRUYsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUVuQyxNQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUN4QyxRQUFRLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7WUFDekMsQ0FBQyxFQUNELENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBRUQsT0FBTztRQUNMLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLElBQUksQ0FDdkIsR0FBRyxDQUNELENBQUMsR0FBRyxFQUFFLEVBQUU7WUFDTixPQUFPLEdBQUcsR0FBRyxJQUFJLENBQUM7UUFDcEIsQ0FBQyxDQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUN4QixHQUFHLENBQ0QsQ0FBQyxJQUFJLEVBQUUsRUFBRTtZQUNQLE9BQU8sSUFBSSxHQUFHLElBQUksQ0FBQztRQUNyQixDQUFDLENBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGLENBQUE7QUFsRVksZ0JBQWdCO0lBRDVCLFVBQVUsRUFBRTtHQUNBLGdCQUFnQixDQWtFNUI7U0FsRVksZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTcGVlZFRlc3RTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIGdldEJwcygpOk9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKFxuICAgICAgKG9ic2VydmVyKSA9PiB7XG4gICAgICAgIHdpbmRvdy5zZXRUaW1lb3V0KFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIC8vIGNvbnN0IGltYWdlQWRkciA9ICdodHRwczovL25nLXNwZWVkLXRlc3QuanJxdWljay5jb20vYXNzZXRzL2ludGVybmV0LXNwZWVkLWltYWdlLmpwZyc7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUFkZHIgPSAnaHR0cHM6Ly93ZWJhcHAudWljLWNocC5vcmcvaW50ZXJuZXQtc3BlZWQtaW1hZ2UuanBnJztcblxuICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSwgZW5kVGltZTtcbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIGRvd25sb2FkLm9ubG9hZCA9IChhKSA9PiB7XG4gICAgICAgICAgICAgIGVuZFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkU2l6ZSA9IDQ5OTUzNzQ7XG5cbiAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSAoZW5kVGltZSAtIHN0YXJ0VGltZSkgLyAxMDAwO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGJpdHNMb2FkZWQgPSBkb3dubG9hZFNpemUgKiA4O1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwZWVkQnBzID0gYml0c0xvYWRlZCAvIGR1cmF0aW9uO1xuXG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoc3BlZWRCcHMpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZG93bmxvYWQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCgtMSk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBjYWNoZUJ1c3RlciA9ICc/bm5uPScgKyBzdGFydFRpbWU7XG4gICAgICAgICAgICBkb3dubG9hZC5zcmMgPSBpbWFnZUFkZHIgKyBjYWNoZUJ1c3RlcjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIDFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG5cbiAgZ2V0S2JwcygpOk9ic2VydmFibGU8bnVtYmVyPiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QnBzKCkucGlwZShcbiAgICAgIG1hcChcbiAgICAgICAgKGJwcykgPT4ge1xuICAgICAgICAgIHJldHVybiBicHMgLyAxMDI0O1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxuXG4gIGdldE1icHMoKTpPYnNlcnZhYmxlPG51bWJlcj4ge1xuICAgIHJldHVybiB0aGlzLmdldEticHMoKS5waXBlKFxuICAgICAgbWFwKFxuICAgICAgICAoa3BicykgPT4ge1xuICAgICAgICAgIHJldHVybiBrcGJzIC8gMTAyNDtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
let SpeedTestService = class SpeedTestService {
    constructor() {
    }
    getSpeed() {
        return new Observable((observer) => {
            window.setTimeout(() => {
                const imageAddr = 'https://webapp.uic-chp.org/internet-speed-image.jpg';
                let startTime, endTime;
                const download = new Image();
                download.onload = () => {
                    endTime = (new Date()).getTime();
                    const downloadSize = 4995374;
                    const duration = (endTime - startTime) / 1000;
                    const bitsLoaded = downloadSize * 8;
                    const speedBps = (bitsLoaded / duration).toFixed(2);
                    const speedKbps = (speedBps / 1024).toFixed(2);
                    const speedMbps = (speedKbps / 1024).toFixed(2);
                    observer.next(speedMbps);
                    observer.complete();
                };
                download.onerror = () => {
                    observer.next(false);
                    observer.complete();
                };
                startTime = (new Date()).getTime();
                const cacheBuster = '?nnn=' + startTime;
                download.src = imageAddr + cacheBuster;
            }, 1);
        });
    }
};
SpeedTestService = tslib_1.__decorate([
    Injectable()
], SpeedTestService);
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NwZWVkLXRlc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBR2hDLElBQWEsZ0JBQWdCLEdBQTdCLE1BQWEsZ0JBQWdCO0lBQzNCO0lBRUEsQ0FBQztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksVUFBVSxDQUNuQixDQUFDLFFBQVEsRUFBRSxFQUFFO1lBQ1gsTUFBTSxDQUFDLFVBQVUsQ0FDZixHQUFHLEVBQUU7Z0JBQ0gsTUFBTSxTQUFTLEdBQUcscURBQXFELENBQUM7Z0JBRXhFLElBQUksU0FBUyxFQUFFLE9BQU8sQ0FBQztnQkFDdkIsTUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFFN0IsUUFBUSxDQUFDLE1BQU0sR0FBRyxHQUFHLEVBQUU7b0JBQ3JCLE9BQU8sR0FBRyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztvQkFFakMsTUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDO29CQUU3QixNQUFNLFFBQVEsR0FBRyxDQUFDLE9BQU8sR0FBRyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUM7b0JBRTlDLE1BQU0sVUFBVSxHQUFHLFlBQVksR0FBRyxDQUFDLENBQUM7b0JBRXBDLE1BQU0sUUFBUSxHQUFPLENBQUMsVUFBVSxHQUFHLFFBQVEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDeEQsTUFBTSxTQUFTLEdBQU8sQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUVuRCxNQUFNLFNBQVMsR0FBRyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRWhELFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7b0JBQ3pCLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQztnQkFDdEIsQ0FBQyxDQUFDO2dCQUVGLFFBQVEsQ0FBQyxPQUFPLEdBQUcsR0FBRyxFQUFFO29CQUN0QixRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUNyQixRQUFRLENBQUMsUUFBUSxFQUFFLENBQUM7Z0JBQ3RCLENBQUMsQ0FBQztnQkFFRixTQUFTLEdBQUcsQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7Z0JBRW5DLE1BQU0sV0FBVyxHQUFHLE9BQU8sR0FBRyxTQUFTLENBQUM7Z0JBQ3hDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsU0FBUyxHQUFHLFdBQVcsQ0FBQztZQUN6QyxDQUFDLEVBQ0QsQ0FBQyxDQUNGLENBQUM7UUFDSixDQUFDLENBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRixDQUFBO0FBaERZLGdCQUFnQjtJQUQ1QixVQUFVLEVBQUU7R0FDQSxnQkFBZ0IsQ0FnRDVCO1NBaERZLGdCQUFnQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTcGVlZFRlc3RTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoKSB7XG5cbiAgfVxuXG4gIGdldFNwZWVkKCk6T2JzZXJ2YWJsZTxzdHJpbmd8Ym9vbGVhbj4ge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShcbiAgICAgIChvYnNlcnZlcikgPT4ge1xuICAgICAgICB3aW5kb3cuc2V0VGltZW91dChcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBpbWFnZUFkZHIgPSAnaHR0cHM6Ly93ZWJhcHAudWljLWNocC5vcmcvaW50ZXJuZXQtc3BlZWQtaW1hZ2UuanBnJztcblxuICAgICAgICAgICAgbGV0IHN0YXJ0VGltZSwgZW5kVGltZTtcbiAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkID0gbmV3IEltYWdlKCk7XG5cbiAgICAgICAgICAgIGRvd25sb2FkLm9ubG9hZCA9ICgpID0+IHtcbiAgICAgICAgICAgICAgZW5kVGltZSA9IChuZXcgRGF0ZSgpKS5nZXRUaW1lKCk7XG5cbiAgICAgICAgICAgICAgY29uc3QgZG93bmxvYWRTaXplID0gNDk5NTM3NDtcblxuICAgICAgICAgICAgICBjb25zdCBkdXJhdGlvbiA9IChlbmRUaW1lIC0gc3RhcnRUaW1lKSAvIDEwMDA7XG5cbiAgICAgICAgICAgICAgY29uc3QgYml0c0xvYWRlZCA9IGRvd25sb2FkU2l6ZSAqIDg7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRCcHM6YW55ID0gKGJpdHNMb2FkZWQgLyBkdXJhdGlvbikudG9GaXhlZCgyKTtcbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRLYnBzOmFueSA9IChzcGVlZEJwcyAvIDEwMjQpLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgY29uc3Qgc3BlZWRNYnBzID0gKHNwZWVkS2JwcyAvIDEwMjQpLnRvRml4ZWQoMik7XG5cbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChzcGVlZE1icHMpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZG93bmxvYWQub25lcnJvciA9ICgpID0+IHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChmYWxzZSk7XG4gICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBzdGFydFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICBjb25zdCBjYWNoZUJ1c3RlciA9ICc/bm5uPScgKyBzdGFydFRpbWU7XG4gICAgICAgICAgICBkb3dubG9hZC5zcmMgPSBpbWFnZUFkZHIgKyBjYWNoZUJ1c3RlcjtcbiAgICAgICAgICB9LFxuICAgICAgICAgIDFcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICApO1xuICB9XG59XG4iXX0=
{"version":3,"sources":["../../src/app/models/file-details.model.ts","../../src/app/models/speed-details.model.ts","../../src/app/services/speed-test.service.ts","../../src/app/speed-test.module.ts"],"names":["this","path","shouldBustCache","size","SpeedDetailsModel","fileSize","prototype","end","endTime","Date","getTime","duration","startTime","bitsLoaded","speedBps","start","SpeedTestService","_applyCacheBuster","Math","random","_download","iterations","fileDetails","allDetails","_this","Observable","observer","newSpeedDetails","download","Image","onload","next","complete","onerror","filePath","src","pipe","mergeMap","console","error","push","count","length","total","i","of","getBps","window","setTimeout","FileDetailsModel","subscribe","getKbps","map","bps","getMbps","kpbs","Injectable","NgModule","args","providers"],"mappings":"iaAUE,WATOA,KAAAC,KAAc,6HACdD,KAAAE,iBAA0B,EAC1BF,KAAAG,KAAc,SCHvBC,EAAA,WAME,SAAAA,EACUC,GAAAL,KAAAK,SAAAA,SAKVD,EAAAE,UAAAC,IAAA,WACEP,KAAKQ,SAAU,IAAKC,MAAQC,UAE5BV,KAAKW,UAAYX,KAAKQ,QAAUR,KAAKY,WAAa,IAElD,IAAMC,EAA6B,EAAhBb,KAAKK,SAExBL,KAAKc,SAAWD,EAAab,KAAKW,UAGpCP,EAAAE,UAAAS,MAAA,WACEf,KAAKY,WAAY,IAAKH,MAAQC,aAvBlC,gBCSE,SAAAM,IAIQhB,KAAAiB,kBAAoB,SAAChB,GAAwB,OAAAA,EAAO,QAAUiB,KAAKC,iBAEnEH,EAAAV,UAAAc,UAAA,SAAUC,EAAoBC,EAA+BC,GAA7D,IAAAC,EAAAxB,KACN,OAAO,IAAIyB,EAAAA,YACT,SAACC,GACC,IAAMC,EAAkB,IAAIvB,EAAkBkB,EAAYnB,MAEpDyB,EAAW,IAAIC,MAErBD,EAASE,OAAS,WAChBH,EAAgBpB,MAEhBmB,EAASK,KAAKJ,GACdD,EAASM,YAGXJ,EAASK,QAAU,WACjBP,EAASK,KAAK,MACdL,EAASM,YAGX,IAAIE,EAAWZ,EAAYrB,KACvBqB,EAAYpB,kBACdgC,EAAWV,EAAKP,kBAAkBiB,IAGpCP,EAAgBZ,QAEhBa,EAASO,IAAMD,KAEjBE,KACAC,EAAAA,UACE,SAACV,GAeC,GAdwB,OAApBA,EACFW,QAAQC,MAAM,gDAEY,IAAfhB,IACTA,EAAa,IAGfA,EAAWiB,KAAKb,SAGQ,IAAfN,IACTA,EAAa,GAGI,IAAfA,EAAkB,CAIpB,IAHA,IAAMoB,EAAQlB,EAAWmB,OACrBC,EAAQ,EAEHC,EAAI,EAAGA,EAAIH,EAAOG,IACzBD,GAASpB,EAAWqB,GAAG9B,SAGzB,IAAMA,EAAW6B,EAAQF,EAEzB,OAAOI,EAAAA,GAAG/B,GAEV,OAAOU,EAAKJ,YAAYC,EAAYC,EAAaC,QAO3DP,EAAAV,UAAAwC,OAAA,SAAOzB,EAAoBC,GAA3B,IAAAE,EAAAxB,KACE,OAAO,IAAIyB,EAAAA,YACT,SAACC,GACCqB,OAAOC,YACL,WACE,QAA2B,IAAhB1B,EACTA,EAAc,IAAI2B,MACb,CACL,QAAgC,IAArB3B,EAAYrB,KAGrB,OAFAqC,QAAQC,MAAM,wCAEP,KAGT,QAAgC,IAArBjB,EAAYnB,KAGrB,OAFAmC,QAAQC,MAAM,wCAEP,UAGkC,IAAhCjB,EAAYpB,gBACrBoB,EAAYpB,iBAAkB,EAE9BoB,EAAYpB,iBAAkD,IAAhCoB,EAAYpB,gBAI9CsB,EAAKJ,UAAUC,EAAYC,GAAa4B,WACtC,SAACpC,GACCY,EAASK,KAAKjB,GACdY,EAASM,gBAIf,OAMRhB,EAAAV,UAAA6C,QAAA,SAAQ9B,EAAoBC,GAC1B,OAAOtB,KAAK8C,OAAOzB,EAAYC,GAAac,KAC1CgB,EAAAA,KACE,SAACC,GACC,OAAOA,EAAM,UAMrBrC,EAAAV,UAAAgD,QAAA,SAAQjC,EAAoBC,GAC1B,OAAOtB,KAAKmD,QAAQ9B,EAAYC,GAAac,KAC3CgB,EAAAA,KACE,SAACG,GACC,OAAOA,EAAO,mCA9HvBC,EAAAA,yDCED,iCALCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,UAAW,CACT3C","sourcesContent":["export class FileDetailsModel {\n  public path:string = 'https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/5mb.jpg';\n  public shouldBustCache:boolean = true;\n  public size:number = 4952221;\n\n  // 408949 // 500kb\n  // 1197292 // 1mb\n  // 4952221 // 5mb\n  // 13848150 // 15mb\n\n  constructor() {\n\n  }\n}\n","export class SpeedDetailsModel {\n  public duration:number;\n  public endTime:number;\n  public speedBps:number;\n  public startTime:number;\n\n  constructor(\n    private fileSize:number\n  ) {\n\n  }\n\n  end():void {\n    this.endTime = (new Date()).getTime();\n\n    this.duration = (this.endTime - this.startTime) / 1000;\n\n    const bitsLoaded = this.fileSize * 8;\n\n    this.speedBps = bitsLoaded / this.duration;\n  }\n\n  start():void {\n    this.startTime = (new Date()).getTime();\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {Observable, of} from 'rxjs';\nimport {mergeMap, map} from 'rxjs/operators';\nimport {FileDetailsModel} from '../models/file-details.model';\nimport {SpeedDetailsModel} from '../models/speed-details.model';\n\n@Injectable()\nexport class SpeedTestService {\n  constructor() {\n\n  }\n\n  private _applyCacheBuster = (path:string): string => path + '?nnn=' + Math.random();\n\n  private _download(iterations?:number, fileDetails?:FileDetailsModel, allDetails?:SpeedDetailsModel[]):Observable<number> {\n    return new Observable<SpeedDetailsModel>(\n      (observer) => {\n        const newSpeedDetails = new SpeedDetailsModel(fileDetails.size);\n\n        const download = new Image();\n\n        download.onload = () => {\n          newSpeedDetails.end();\n\n          observer.next(newSpeedDetails);\n          observer.complete();\n        };\n\n        download.onerror = () => {\n          observer.next(null);\n          observer.complete();\n        };\n\n        let filePath = fileDetails.path;\n        if (fileDetails.shouldBustCache) {\n          filePath = this._applyCacheBuster(filePath);\n        }\n\n        newSpeedDetails.start();\n\n        download.src = filePath;\n      }\n    ).pipe(\n      mergeMap(\n        (newSpeedDetails:SpeedDetailsModel|null) => {\n          if (newSpeedDetails === null) {\n            console.error('ng-speed-test: Error downloading file.');\n          } else {\n            if (typeof allDetails === 'undefined') {\n              allDetails = [];\n            }\n\n            allDetails.push(newSpeedDetails);\n          }\n\n          if (typeof iterations === 'undefined') {\n            iterations = 3;\n          }\n\n          if (iterations === 1) {\n            const count = allDetails.length;\n            let total = 0;\n\n            for (let i = 0; i < count; i++) {\n              total += allDetails[i].speedBps;\n            }\n\n            const speedBps = total / count;\n\n            return of(speedBps);\n          } else {\n            return this._download(--iterations, fileDetails, allDetails);\n          }\n        }\n      )\n    );\n  }\n\n  getBps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number|null> {\n    return new Observable(\n      (observer) => {\n        window.setTimeout(\n          () => {\n            if (typeof fileDetails === 'undefined') {\n              fileDetails = new FileDetailsModel();\n            } else {\n              if (typeof fileDetails.path === 'undefined') {\n                console.error('ng-speed-test: File path is missing.');\n\n                return null;\n              }\n\n              if (typeof fileDetails.size === 'undefined') {\n                console.error('ng-speed-test: File size is missing.');\n\n                return null;\n              }\n\n              if (typeof fileDetails.shouldBustCache === 'undefined') {\n                fileDetails.shouldBustCache = true;\n              } else {\n                fileDetails.shouldBustCache = fileDetails.shouldBustCache === true;\n              }\n            }\n\n            this._download(iterations, fileDetails).subscribe(\n              (speedBps) => {\n                observer.next(speedBps);\n                observer.complete();\n              }\n            );\n          },\n          1\n        );\n      }\n    );\n  }\n\n  getKbps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number> {\n    return this.getBps(iterations, fileDetails).pipe(\n      map(\n        (bps) => {\n          return bps / 1024;\n        }\n      )\n    );\n  }\n\n  getMbps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number> {\n    return this.getKbps(iterations, fileDetails).pipe(\n      map(\n        (kpbs) => {\n          return kpbs / 1024;\n        }\n      )\n    );\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {SpeedTestService} from './services/speed-test.service';\n\n@NgModule({\n  providers: [\n    SpeedTestService\n  ]\n})\nexport class SpeedTestModule {}\n"]}
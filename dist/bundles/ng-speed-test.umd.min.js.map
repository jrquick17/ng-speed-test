{"version":3,"sources":["../../src/app/models/file-details.model.ts","../../src/app/models/speed-details.model.ts","../../src/app/services/speed-test.service.ts","../../src/app/speed-test.module.ts"],"names":["this","path","shouldBustCache","size","SpeedDetailsModel","fileSize","duration","hasEnded","startTime","endTime","speedBps","prototype","_update","milliseconds","bitsLoaded","end","Date","getTime","error","start","SpeedTestService","_applyCacheBuster","Math","random","_download","iterations","fileDetails","allDetails","_this","Observable","observer","newSpeedDetails","download","Image","onload","next","complete","onerror","filePath","src","pipe","mergeMap","push","count","length","total","i","of","getBps","window","setTimeout","FileDetailsModel","console","subscribe","getKbps","map","bps","getMbps","kpbs","isOnline","merge","fromEvent","sub","navigator","onLine","Injectable","NgModule","args","providers"],"mappings":"iaAUE,WATOA,KAAAC,KAAc,6HACdD,KAAAE,iBAA0B,EAC1BF,KAAAG,KAAc,SCHvBC,EAAA,WASE,SAAAA,EACUC,GAAAL,KAAAK,SAAAA,EATHL,KAAAM,SAAmB,EACnBN,KAAAO,UAAmB,EAEnBP,KAAAQ,UAAmB,KACnBR,KAAAS,QAAiB,KAEjBT,KAAAU,SAAkB,SAQjBN,EAAAO,UAAAC,QAAA,WACN,GAAqB,OAAjBZ,KAAKS,QAAkB,CACzB,IAAMI,EAAeb,KAAKS,QAAUT,KAAKQ,UACpB,IAAjBK,IACFb,KAAKM,SAAWO,EAAe,KAGjC,IAAMC,EAA6B,EAAhBd,KAAKK,SAExBL,KAAKU,SAAWI,EAAad,KAAKM,WAItCF,EAAAO,UAAAI,IAAA,WACOf,KAAKO,WACRP,KAAKO,UAAW,EAEhBP,KAAKS,SAAU,IAAKO,MAAQC,UAE5BjB,KAAKY,YAITR,EAAAO,UAAAO,MAAA,WACOlB,KAAKO,WACRP,KAAKO,UAAW,EAEhBP,KAAKS,QAAU,KAEfT,KAAKY,YAITR,EAAAO,UAAAQ,MAAA,WACEnB,KAAKQ,WAAY,IAAKQ,MAAQC,aAjDlC,gBCUE,SAAAG,IAIQpB,KAAAqB,kBAAoB,SAACpB,GAAwB,OAAAA,EAAO,QAAUqB,KAAKC,iBAEnEH,EAAAT,UAAAa,UAAA,SAAUC,EAAoBC,EAA+BC,GAA7D,IAAAC,EAAA5B,KACN,OAAO,IAAI6B,EAAAA,YACT,SAACC,GACC,IAAMC,EAAkB,IAAI3B,EAAkBsB,EAAYvB,MAEpD6B,EAAW,IAAIC,MAErBD,EAASE,OAAS,WAChBH,EAAgBhB,MAEhBe,EAASK,KAAKJ,GACdD,EAASM,YAGXJ,EAASK,QAAU,WACjBN,EAAgBb,QAEhBY,EAASK,KAAKJ,GACdD,EAASM,YAGX,IAAIE,EAAWZ,EAAYzB,KACvByB,EAAYxB,kBACdoC,EAAWV,EAAKP,kBAAkBiB,IAGpCP,EAAgBZ,QAEhBa,EAASO,IAAMD,KAEjBE,KACAC,EAAAA,UACE,SAACV,GAWC,QAV0B,IAAfJ,IACTA,EAAa,IAGfA,EAAWe,KAAKX,QAEU,IAAfN,IACTA,EAAa,GAGI,IAAfA,EAAkB,CAIpB,IAHA,IAAMkB,EAAQhB,EAAWiB,OACrBC,EAAQ,EAEHC,EAAI,EAAGA,EAAIH,EAAOG,IACzBD,GAASlB,EAAWmB,GAAGpC,SAGzB,IAAMA,EAAWmC,EAAQF,EAEzB,OAAOI,EAAAA,GAAGrC,GAEV,OAAOkB,EAAKJ,YAAYC,EAAYC,EAAaC,QAO3DP,EAAAT,UAAAqC,OAAA,SAAOvB,EAAoBC,GAA3B,IAAAE,EAAA5B,KACE,OAAO,IAAI6B,EAAAA,YACT,SAACC,GACCmB,OAAOC,YACL,WACE,QAA2B,IAAhBxB,EACTA,EAAc,IAAIyB,MACb,CACL,QAAgC,IAArBzB,EAAYzB,KAGrB,OAFAmD,QAAQlC,MAAM,wCAEP,KAGT,QAAgC,IAArBQ,EAAYvB,KAGrB,OAFAiD,QAAQlC,MAAM,wCAEP,UAGkC,IAAhCQ,EAAYxB,gBACrBwB,EAAYxB,iBAAkB,EAE9BwB,EAAYxB,iBAAkD,IAAhCwB,EAAYxB,gBAI9C0B,EAAKJ,UAAUC,EAAYC,GAAa2B,WACtC,SAAC3C,GACCoB,EAASK,KAAKzB,GACdoB,EAASM,gBAIf,OAMRhB,EAAAT,UAAA2C,QAAA,SAAQ7B,EAAoBC,GAC1B,OAAO1B,KAAKgD,OAAOvB,EAAYC,GAAac,KAC1Ce,EAAAA,KACE,SAACC,GACC,OAAOA,EAAM,UAMrBpC,EAAAT,UAAA8C,QAAA,SAAQhC,EAAoBC,GAC1B,OAAO1B,KAAKsD,QAAQ7B,EAAYC,GAAac,KAC3Ce,EAAAA,KACE,SAACG,GACC,OAAOA,EAAO,UAMtBtC,EAAAT,UAAAgD,SAAA,WACE,OAAOC,EAAAA,MACLC,EAAAA,UAAUZ,OAAQ,WAAWT,KAC3Be,EAAAA,KACE,WAAM,OAAA,MAGVM,EAAAA,UAAUZ,OAAQ,UAAUT,KAC1Be,EAAAA,KACE,WAAM,OAAA,MAGV,IAAI1B,EAAAA,YACF,SAACiC,GACCA,EAAI3B,KAAK4B,UAAUC,QACnBF,EAAI1B,yCAjJb6B,EAAAA,yDCCD,iCALCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,UAAW,CACThD","sourcesContent":["export class FileDetailsModel {\n  public path:string = 'https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/5mb.jpg';\n  public shouldBustCache:boolean = true;\n  public size:number = 4952221;\n\n  // 408949 // 500kb\n  // 1197292 // 1mb\n  // 4952221 // 5mb\n  // 13848150 // 15mb\n\n  constructor() {\n\n  }\n}\n","export class SpeedDetailsModel {\n  public duration:number  = 0;\n  public hasEnded:boolean = false;\n\n  public startTime:number = null;\n  public endTime:number = null;\n\n  public speedBps:number = 0;\n\n  constructor(\n    private fileSize:number\n  ) {\n\n  }\n\n  private _update():void {\n    if (this.endTime !== null) {\n      const milliseconds = this.endTime - this.startTime;\n      if (milliseconds !== 0) {\n        this.duration = milliseconds / 1000;\n      }\n\n      const bitsLoaded = this.fileSize * 8;\n\n      this.speedBps = bitsLoaded / this.duration;\n    }\n  }\n\n  end():void {\n    if (!this.hasEnded) {\n      this.hasEnded = true;\n\n      this.endTime = (new Date()).getTime();\n\n      this._update();\n    }\n  }\n\n  error():void {\n    if (!this.hasEnded) {\n      this.hasEnded = true;\n\n      this.endTime = null;\n\n      this._update();\n    }\n  }\n\n  start():void {\n    this.startTime = (new Date()).getTime();\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {fromEvent, merge, Observable, Observer, of} from 'rxjs';\nimport {mergeMap, map} from 'rxjs/operators';\n\nimport {FileDetailsModel} from '../models/file-details.model';\nimport {SpeedDetailsModel} from '../models/speed-details.model';\n\n@Injectable()\nexport class SpeedTestService {\n  constructor() {\n\n  }\n\n  private _applyCacheBuster = (path:string): string => path + '?nnn=' + Math.random();\n\n  private _download(iterations?:number, fileDetails?:FileDetailsModel, allDetails?:SpeedDetailsModel[]):Observable<number> {\n    return new Observable<SpeedDetailsModel>(\n      (observer) => {\n        const newSpeedDetails = new SpeedDetailsModel(fileDetails.size);\n\n        const download = new Image();\n\n        download.onload = () => {\n          newSpeedDetails.end();\n\n          observer.next(newSpeedDetails);\n          observer.complete();\n        };\n\n        download.onerror = () => {\n          newSpeedDetails.error();\n\n          observer.next(newSpeedDetails);\n          observer.complete();\n        };\n\n        let filePath = fileDetails.path;\n        if (fileDetails.shouldBustCache) {\n          filePath = this._applyCacheBuster(filePath);\n        }\n\n        newSpeedDetails.start();\n\n        download.src = filePath;\n      }\n    ).pipe(\n      mergeMap(\n        (newSpeedDetails:SpeedDetailsModel|null) => {\n          if (typeof allDetails === 'undefined') {\n            allDetails = [];\n          }\n\n          allDetails.push(newSpeedDetails);\n\n          if (typeof iterations === 'undefined') {\n            iterations = 3;\n          }\n\n          if (iterations === 1) {\n            const count = allDetails.length;\n            let total = 0;\n\n            for (let i = 0; i < count; i++) {\n              total += allDetails[i].speedBps;\n            }\n\n            const speedBps = total / count;\n\n            return of(speedBps);\n          } else {\n            return this._download(--iterations, fileDetails, allDetails);\n          }\n        }\n      )\n    );\n  }\n\n  getBps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number|null> {\n    return new Observable(\n      (observer) => {\n        window.setTimeout(\n          () => {\n            if (typeof fileDetails === 'undefined') {\n              fileDetails = new FileDetailsModel();\n            } else {\n              if (typeof fileDetails.path === 'undefined') {\n                console.error('ng-speed-test: File path is missing.');\n\n                return null;\n              }\n\n              if (typeof fileDetails.size === 'undefined') {\n                console.error('ng-speed-test: File size is missing.');\n\n                return null;\n              }\n\n              if (typeof fileDetails.shouldBustCache === 'undefined') {\n                fileDetails.shouldBustCache = true;\n              } else {\n                fileDetails.shouldBustCache = fileDetails.shouldBustCache === true;\n              }\n            }\n\n            this._download(iterations, fileDetails).subscribe(\n              (speedBps) => {\n                observer.next(speedBps);\n                observer.complete();\n              }\n            );\n          },\n          1\n        );\n      }\n    );\n  }\n\n  getKbps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number> {\n    return this.getBps(iterations, fileDetails).pipe(\n      map(\n        (bps) => {\n          return bps / 1024;\n        }\n      )\n    );\n  }\n\n  getMbps(iterations?:number, fileDetails?:FileDetailsModel):Observable<number> {\n    return this.getKbps(iterations, fileDetails).pipe(\n      map(\n        (kpbs) => {\n          return kpbs / 1024;\n        }\n      )\n    );\n  }\n\n  isOnline():Observable<boolean> {\n    return merge<boolean>(\n      fromEvent(window, 'offline').pipe(\n        map(\n          () => false\n        )\n      ),\n      fromEvent(window, 'online').pipe(\n        map(\n          () => true\n        )\n      ),\n      new Observable(\n        (sub:Observer<boolean>) => {\n          sub.next(navigator.onLine);\n          sub.complete();\n        }\n      )\n    );\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {SpeedTestService} from './services/speed-test.service';\n\n@NgModule({\n  providers: [\n    SpeedTestService\n  ]\n})\nexport class SpeedTestModule {}\n"]}
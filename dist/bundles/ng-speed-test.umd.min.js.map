{"version":3,"sources":["../../src/app/models/speed-test-file.model.ts","../../src/app/models/speed-test-settings.model.ts","../../src/app/models/speed-test-results.model.ts","../../src/app/services/speed-test.service.ts","../../src/app/speed-test.module.ts"],"names":["this","path","shouldBustCache","size","SpeedTestResultsModel","fileSize","duration","hasEnded","startTime","endTime","speedBps","prototype","_update","milliseconds","bitsLoaded","end","Date","getTime","error","start","SpeedTestService","_applyCacheBuster","Math","random","_download","settings","allDetails","_this","Observable","observer","newSpeedDetails","file","download","Image","onload","next","complete","onerror","filePath","src","pipe","mergeMap","push","iterations","count","length","total","i","of","getBps","window","setTimeout","SpeedTestFileModel","console","deepCopy","subscribe","getKbps","map","bps","getMbps","kpbs","isOnline","merge","fromEvent","sub","navigator","onLine","Injectable","NgModule","args","providers"],"mappings":"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","sourcesContent":["export class SpeedTestFileModel {\n  public path:string = 'https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/5mb.jpg';\n  public shouldBustCache:boolean = true;\n  public size:number = 4952221;\n\n  // 408949 // 500kb\n  // 1197292 // 1mb\n  // 4952221 // 5mb\n  // 13848150 // 15mb\n\n  constructor() {\n\n  }\n}\n","import {SpeedTestFileModel} from './speed-test-file.model';\n\nexport class SpeedTestSettingsModel {\n  public iterations?: number;\n  public file?: SpeedTestFileModel;\n}\n","export class SpeedTestResultsModel {\n  public duration:number  = 0;\n  public hasEnded:boolean = false;\n\n  public startTime:number = null;\n  public endTime:number = null;\n\n  public speedBps:number = 0;\n\n  constructor(\n    private fileSize:number\n  ) {\n\n  }\n\n  private _update():void {\n    if (this.endTime !== null) {\n      const milliseconds = this.endTime - this.startTime;\n      if (milliseconds !== 0) {\n        this.duration = milliseconds / 1000;\n      }\n\n      const bitsLoaded = this.fileSize * 8;\n\n      this.speedBps = bitsLoaded / this.duration;\n    }\n  }\n\n  end():void {\n    if (!this.hasEnded) {\n      this.hasEnded = true;\n\n      this.endTime = (new Date()).getTime();\n\n      this._update();\n    }\n  }\n\n  error():void {\n    if (!this.hasEnded) {\n      this.hasEnded = true;\n\n      this.endTime = null;\n\n      this._update();\n    }\n  }\n\n  start():void {\n    this.startTime = (new Date()).getTime();\n  }\n}\n","import {Injectable} from '@angular/core';\n\nimport {fromEvent, merge, Observable, Observer, of} from 'rxjs';\nimport {mergeMap, map} from 'rxjs/operators';\n\nimport {SpeedTestFileModel} from '../models/speed-test-file.model';\nimport {SpeedTestResultsModel} from '../models/speed-test-results.model';\nimport {SpeedTestSettingsModel} from '../models/speed-test-settings.model';\nimport {deepCopy} from '@angular-devkit/core';\n\n@Injectable()\nexport class SpeedTestService {\n  constructor() {\n\n  }\n\n  private _applyCacheBuster = (path:string): string => path + '?nnn=' + Math.random();\n\n  private _download(settings:SpeedTestSettingsModel, allDetails?:SpeedTestResultsModel[]):Observable<number> {\n    return new Observable<SpeedTestResultsModel>(\n      (observer) => {\n        const newSpeedDetails = new SpeedTestResultsModel(settings.file.size);\n\n        const download = new Image();\n\n        download.onload = () => {\n          newSpeedDetails.end();\n\n          observer.next(newSpeedDetails);\n          observer.complete();\n        };\n\n        download.onerror = () => {\n          newSpeedDetails.error();\n\n          observer.next(newSpeedDetails);\n          observer.complete();\n        };\n\n        let filePath = settings.file.path;\n        if (settings.file.shouldBustCache) {\n          filePath = this._applyCacheBuster(filePath);\n        }\n\n        newSpeedDetails.start();\n\n        download.src = filePath;\n      }\n    ).pipe(\n      mergeMap(\n        (newSpeedDetails:SpeedTestResultsModel|null) => {\n          if (typeof allDetails === 'undefined') {\n            allDetails = [];\n          }\n\n          allDetails.push(newSpeedDetails);\n\n          if (settings.iterations === 1) {\n            const count = allDetails.length;\n            let total = 0;\n\n            for (let i = 0; i < count; i++) {\n              total += allDetails[i].speedBps;\n            }\n\n            const speedBps = total / count;\n\n            return of(speedBps);\n          } else {\n            settings.iterations--;\n\n            return this._download(settings, allDetails);\n          }\n        }\n      )\n    );\n  }\n\n  getBps(settings:SpeedTestSettingsModel):Observable<number|null> {\n    return new Observable(\n      (observer) => {\n        window.setTimeout(\n          () => {\n            if (typeof settings.iterations === 'undefined') {\n              settings.iterations = 3;\n            }\n\n            if (typeof settings.file === 'undefined') {\n              settings.file = new SpeedTestFileModel();\n            } else {\n              if (typeof settings.file.path === 'undefined') {\n                console.error('ng-speed-test: File path is missing.');\n\n                return null;\n              }\n\n              if (typeof settings.file.size === 'undefined') {\n                console.error('ng-speed-test: File size is missing.');\n\n                return null;\n              }\n\n              if (typeof settings.file.shouldBustCache === 'undefined') {\n                settings.file.shouldBustCache = true;\n              } else {\n                settings.file.shouldBustCache = settings.file.shouldBustCache === true;\n              }\n            }\n\n            this._download(deepCopy(settings)).subscribe(\n              (speedBps) => {\n                observer.next(speedBps);\n                observer.complete();\n              }\n            );\n          },\n          1\n        );\n      }\n    );\n  }\n\n  getKbps(settings:SpeedTestSettingsModel):Observable<number> {\n    return this.getBps(settings).pipe(\n      map(\n        (bps) => {\n          return bps / 1024;\n        }\n      )\n    );\n  }\n\n  getMbps(settings:SpeedTestSettingsModel):Observable<number> {\n    return this.getKbps(settings).pipe(\n      map(\n        (kpbs) => {\n          return kpbs / 1024;\n        }\n      )\n    );\n  }\n\n  isOnline():Observable<boolean> {\n    return merge<boolean>(\n      fromEvent(window, 'offline').pipe(\n        map(\n          () => false\n        )\n      ),\n      fromEvent(window, 'online').pipe(\n        map(\n          () => true\n        )\n      ),\n      new Observable(\n        (sub:Observer<boolean>) => {\n          sub.next(navigator.onLine);\n          sub.complete();\n        }\n      )\n    );\n  }\n}\n","import {NgModule} from '@angular/core';\n\nimport {SpeedTestService} from './services/speed-test.service';\n\n@NgModule({\n  providers: [\n    SpeedTestService\n  ]\n})\nexport class SpeedTestModule {}\n"]}
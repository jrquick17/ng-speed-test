import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
var SpeedTestService = /** @class */ (function () {
    function SpeedTestService() {
    }
    SpeedTestService.prototype.getSpeed = function () {
        return new Observable(function (observer) {
            window.setTimeout(function () {
                var imageAddr = 'https://webapp.uic-chp.org/internet-speed-image.jpg';
                var startTime, endTime;
                var download = new Image();
                download.onload = function () {
                    endTime = (new Date()).getTime();
                    var downloadSize = 4995374;
                    var duration = (endTime - startTime) / 1000;
                    var bitsLoaded = downloadSize * 8;
                    var speedBps = (bitsLoaded / duration).toFixed(2);
                    var speedKbps = (speedBps / 1024).toFixed(2);
                    var speedMbps = (speedKbps / 1024).toFixed(2);
                    observer.next(speedMbps);
                    observer.complete();
                };
                download.onerror = function () {
                    observer.next(false);
                    observer.complete();
                };
                startTime = (new Date()).getTime();
                var cacheBuster = '?nnn=' + startTime;
                download.src = imageAddr + cacheBuster;
            }, 1);
        });
    };
    SpeedTestService = tslib_1.__decorate([
        Injectable()
    ], SpeedTestService);
    return SpeedTestService;
}());
export { SpeedTestService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmctc3BlZWQtdGVzdC8iLCJzb3VyY2VzIjpbInNlcnZpY2VzL3NwZWVkLXRlc3Quc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBR2hDO0lBQ0U7SUFFQSxDQUFDO0lBRUQsbUNBQVEsR0FBUjtRQUNFLE9BQU8sSUFBSSxVQUFVLENBQ25CLFVBQUMsUUFBUTtZQUNQLE1BQU0sQ0FBQyxVQUFVLENBQ2Y7Z0JBQ0UsSUFBTSxTQUFTLEdBQUcscURBQXFELENBQUM7Z0JBRXhFLElBQUksU0FBUyxFQUFFLE9BQU8sQ0FBQztnQkFDdkIsSUFBTSxRQUFRLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztnQkFFN0IsUUFBUSxDQUFDLE1BQU0sR0FBRztvQkFDaEIsT0FBTyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO29CQUVqQyxJQUFNLFlBQVksR0FBRyxPQUFPLENBQUM7b0JBRTdCLElBQU0sUUFBUSxHQUFHLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQztvQkFFOUMsSUFBTSxVQUFVLEdBQUcsWUFBWSxHQUFHLENBQUMsQ0FBQztvQkFFcEMsSUFBTSxRQUFRLEdBQU8sQ0FBQyxVQUFVLEdBQUcsUUFBUSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUN4RCxJQUFNLFNBQVMsR0FBTyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRW5ELElBQU0sU0FBUyxHQUFHLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFFaEQsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztvQkFDekIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUM7Z0JBRUYsUUFBUSxDQUFDLE9BQU8sR0FBRztvQkFDakIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDckIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUN0QixDQUFDLENBQUM7Z0JBRUYsU0FBUyxHQUFHLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUVuQyxJQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsU0FBUyxDQUFDO2dCQUN4QyxRQUFRLENBQUMsR0FBRyxHQUFHLFNBQVMsR0FBRyxXQUFXLENBQUM7WUFDekMsQ0FBQyxFQUNELENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDO0lBL0NVLGdCQUFnQjtRQUQ1QixVQUFVLEVBQUU7T0FDQSxnQkFBZ0IsQ0FnRDVCO0lBQUQsdUJBQUM7Q0FBQSxBQWhERCxJQWdEQztTQWhEWSxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU3BlZWRUZXN0U2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuXG4gIH1cblxuICBnZXRTcGVlZCgpOk9ic2VydmFibGU8c3RyaW5nfGJvb2xlYW4+IHtcbiAgICByZXR1cm4gbmV3IE9ic2VydmFibGUoXG4gICAgICAob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgd2luZG93LnNldFRpbWVvdXQoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VBZGRyID0gJ2h0dHBzOi8vd2ViYXBwLnVpYy1jaHAub3JnL2ludGVybmV0LXNwZWVkLWltYWdlLmpwZyc7XG5cbiAgICAgICAgICAgIGxldCBzdGFydFRpbWUsIGVuZFRpbWU7XG4gICAgICAgICAgICBjb25zdCBkb3dubG9hZCA9IG5ldyBJbWFnZSgpO1xuXG4gICAgICAgICAgICBkb3dubG9hZC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIGVuZFRpbWUgPSAobmV3IERhdGUoKSkuZ2V0VGltZSgpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGRvd25sb2FkU2l6ZSA9IDQ5OTUzNzQ7XG5cbiAgICAgICAgICAgICAgY29uc3QgZHVyYXRpb24gPSAoZW5kVGltZSAtIHN0YXJ0VGltZSkgLyAxMDAwO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGJpdHNMb2FkZWQgPSBkb3dubG9hZFNpemUgKiA4O1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwZWVkQnBzOmFueSA9IChiaXRzTG9hZGVkIC8gZHVyYXRpb24pLnRvRml4ZWQoMik7XG4gICAgICAgICAgICAgIGNvbnN0IHNwZWVkS2JwczphbnkgPSAoc3BlZWRCcHMgLyAxMDI0KS50b0ZpeGVkKDIpO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHNwZWVkTWJwcyA9IChzcGVlZEticHMgLyAxMDI0KS50b0ZpeGVkKDIpO1xuXG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoc3BlZWRNYnBzKTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGRvd25sb2FkLm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZmFsc2UpO1xuICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc3RhcnRUaW1lID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKTtcblxuICAgICAgICAgICAgY29uc3QgY2FjaGVCdXN0ZXIgPSAnP25ubj0nICsgc3RhcnRUaW1lO1xuICAgICAgICAgICAgZG93bmxvYWQuc3JjID0gaW1hZ2VBZGRyICsgY2FjaGVCdXN0ZXI7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAxXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxufVxuIl19
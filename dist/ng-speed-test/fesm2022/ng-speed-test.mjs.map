{"version":3,"file":"ng-speed-test.mjs","sources":["../../../src/models/speed-test-file.model.ts","../../../src/models/speed-test-results.model.ts","../../../src/models/speed-test-settings.model.ts","../../../src/services/speed-test.service.ts","../../../src/speed-test.module.ts","../../../src/ng-speed-test.ts"],"sourcesContent":["export interface SpeedTestFile {\r\n  path: string;\r\n  shouldBustCache: boolean;\r\n  size: number;\r\n}\r\n\r\nexport class SpeedTestFileModel implements SpeedTestFile {\r\n  public path: string = 'https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/5mb.jpg';\r\n  public shouldBustCache: boolean = true;\r\n  public size: number = 4952221;\r\n\r\n  // Available test files:\r\n  // https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/500kb.jpg\r\n  // 500kb - 408949 bytes\r\n  // https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/1mb.jpg\r\n  // 1mb - 1197292 bytes\r\n  // https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/5mb.jpg\r\n  // 5mb - 4952221 bytes\r\n  // https://raw.githubusercontent.com/jrquick17/ng-speed-test/02c59e4afde67c35a5ba74014b91d44b33c0b3fe/demo/src/assets/13mb.jpg\r\n  // 13mb - 13848150 bytes\r\n\r\n  constructor(file?: Partial<SpeedTestFile>) {\r\n    if (file) {\r\n      Object.assign(this, file);\r\n    }\r\n  }\r\n}\r\n","export interface SpeedTestResults {\r\n  duration: number;\r\n  hasEnded: boolean;\r\n  startTime: number | null;\r\n  endTime: number | null;\r\n  speedBps: number;\r\n  speedKbps: number;\r\n  speedMbps: number;\r\n}\r\n\r\nexport class SpeedTestResultsModel implements SpeedTestResults {\r\n  public duration: number = 0;\r\n  public hasEnded: boolean = false;\r\n  public startTime: number | null = null;\r\n  public endTime: number | null = null;\r\n  public speedBps: number = 0;\r\n\r\n  constructor(private fileSize: number) {}\r\n\r\n  get speedKbps(): number {\r\n    return this.speedBps / 1024;\r\n  }\r\n\r\n  get speedMbps(): number {\r\n    return this.speedKbps / 1024;\r\n  }\r\n\r\n  private _update(): void {\r\n    if (this.endTime !== null && this.startTime !== null) {\r\n      const milliseconds = this.endTime - this.startTime;\r\n      if (milliseconds !== 0) {\r\n        this.duration = milliseconds / 1000;\r\n      }\r\n\r\n      const bitsLoaded = this.fileSize * 8;\r\n      this.speedBps = bitsLoaded / this.duration;\r\n    }\r\n  }\r\n\r\n  end(): void {\r\n    if (!this.hasEnded) {\r\n      this.hasEnded = true;\r\n      this.endTime = Date.now();\r\n      this._update();\r\n    }\r\n  }\r\n\r\n  error(): void {\r\n    if (!this.hasEnded) {\r\n      this.hasEnded = true;\r\n      this.endTime = null;\r\n      this._update();\r\n    }\r\n  }\r\n\r\n  start(): void {\r\n    this.startTime = Date.now();\r\n  }\r\n}\r\n","import {SpeedTestFile, SpeedTestFileModel} from './speed-test-file.model';\r\n\r\nexport interface SpeedTestSettings {\r\n  iterations?: number;\r\n  file?: SpeedTestFile;\r\n  retryDelay?: number;\r\n}\r\n\r\nexport class SpeedTestSettingsModel implements SpeedTestSettings {\r\n  public iterations?: number = 3;\r\n  public file?: SpeedTestFileModel = new SpeedTestFileModel();\r\n  public retryDelay?: number = 500;\r\n\r\n  constructor(settings?: Partial<SpeedTestSettings>) {\r\n    if (settings) {\r\n      Object.assign(this, settings);\r\n      if (settings.file) {\r\n        this.file = new SpeedTestFileModel(settings.file);\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { fromEvent, merge, Observable, of, throwError } from 'rxjs';\r\nimport { map, mergeMap, catchError, timeout } from 'rxjs/operators';\r\n\r\nimport { SpeedTestResultsModel } from '../models/speed-test-results.model';\r\nimport { SpeedTestSettingsModel } from '../models/speed-test-settings.model';\r\nimport {SpeedTestResult} from '../models/speed-test-result.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class SpeedTestService {\r\n    private readonly DEFAULT_TIMEOUT = 30000; // 30 seconds\r\n\r\n    constructor() {}\r\n\r\n    private applyCacheBuster(path: string): string {\r\n        const separator = path.includes('?') ? '&' : '?';\r\n        return `${path}${separator}cache_bust=${Date.now()}_${Math.random()}`;\r\n    }\r\n\r\n    private downloadTest(settings: SpeedTestSettingsModel, allResults: SpeedTestResultsModel[] = []): Observable<number> {\r\n        return new Observable<SpeedTestResultsModel>(observer => {\r\n            const testResult = new SpeedTestResultsModel(settings.file!.size);\r\n\r\n            // Use fetch API for better error handling and modern approach\r\n            const abortController = new AbortController();\r\n\r\n            let filePath = settings.file!.path;\r\n            if (settings.file!.shouldBustCache) {\r\n                filePath = this.applyCacheBuster(filePath);\r\n            }\r\n\r\n            testResult.start();\r\n\r\n            fetch(filePath, {\r\n                method: 'GET',\r\n                signal: abortController.signal,\r\n                cache: 'no-cache'\r\n            })\r\n                .then(response => {\r\n                    if (!response.ok) {\r\n                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n                    }\r\n                    return response.blob();\r\n                })\r\n                .then(() => {\r\n                    testResult.end();\r\n                    observer.next(testResult);\r\n                    observer.complete();\r\n                })\r\n                .catch(error => {\r\n                    console.warn('Speed test download failed:', error);\r\n                    testResult.error();\r\n\r\n                    const delay = settings.iterations !== 1 ? settings.retryDelay! : 0;\r\n\r\n                    setTimeout(() => {\r\n                        observer.next(testResult);\r\n                        observer.complete();\r\n                    }, delay);\r\n                });\r\n\r\n            // Cleanup function\r\n            return () => {\r\n                abortController.abort();\r\n            };\r\n        }).pipe(\r\n            timeout(this.DEFAULT_TIMEOUT),\r\n            catchError(error => {\r\n                console.error('Speed test timeout or error:', error);\r\n                const failedResult = new SpeedTestResultsModel(settings.file!.size);\r\n                failedResult.error();\r\n                return of(failedResult);\r\n            }),\r\n            mergeMap((testResult: SpeedTestResultsModel) => {\r\n                allResults.push(testResult);\r\n\r\n                if (settings.iterations === 1) {\r\n                    // Calculate average speed from all valid results\r\n                    const validResults = allResults.filter(result => result.speedBps > 0);\r\n\r\n                    if (validResults.length === 0) {\r\n                        return throwError(() => new Error('All speed test iterations failed'));\r\n                    }\r\n\r\n                    const totalSpeed = validResults.reduce((sum, result) => sum + result.speedBps, 0);\r\n                    const averageSpeed = totalSpeed / validResults.length;\r\n\r\n                    return of(averageSpeed);\r\n                } else {\r\n                    settings.iterations!--;\r\n                    return this.downloadTest(settings, allResults);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private validateSettings(settings: SpeedTestSettingsModel): void {\r\n        if (!settings.file?.path) {\r\n            throw new Error('ng-speed-test: File path is required');\r\n        }\r\n\r\n        if (!settings.file?.size || settings.file.size <= 0) {\r\n            throw new Error('ng-speed-test: Valid file size is required');\r\n        }\r\n\r\n        if (settings.iterations && settings.iterations < 1) {\r\n            throw new Error('ng-speed-test: Iterations must be at least 1');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get internet speed in bits per second (bps)\r\n     */\r\n    getBps(customSettings?: Partial<SpeedTestSettingsModel>): Observable<number> {\r\n        return new Observable(observer => {\r\n            // Small delay to ensure proper initialization\r\n            setTimeout(() => {\r\n                const settings = new SpeedTestSettingsModel(customSettings);\r\n\r\n                try {\r\n                    this.validateSettings(settings);\r\n\r\n                    this.downloadTest(settings).subscribe({\r\n                        next: (speedBps) => {\r\n                            observer.next(speedBps);\r\n                            observer.complete();\r\n                        },\r\n                        error: (error) => {\r\n                            observer.error(error);\r\n                        }\r\n                    });\r\n                } catch (error) {\r\n                    observer.error(error);\r\n                }\r\n            }, 1);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Get internet speed in kilobits per second (Kbps)\r\n     */\r\n    getKbps(settings?: Partial<SpeedTestSettingsModel>): Observable<number> {\r\n        return this.getBps(settings).pipe(\r\n            map(bps => bps / 1024)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get internet speed in megabits per second (Mbps)\r\n     */\r\n    getMbps(settings?: Partial<SpeedTestSettingsModel>): Observable<number> {\r\n        return this.getKbps(settings).pipe(\r\n            map(kbps => kbps / 1024)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Get comprehensive speed test results\r\n     */\r\n    getSpeedTestResult(settings?: Partial<SpeedTestSettingsModel>): Observable<SpeedTestResult> {\r\n        const startTime = Date.now();\r\n\r\n        return this.getBps(settings).pipe(\r\n            map(bps => ({\r\n                bps,\r\n                kbps: bps / 1024,\r\n                mbps: bps / (1024 * 1024),\r\n                duration: (Date.now() - startTime) / 1000\r\n            }))\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Check if the browser is online\r\n     */\r\n    isOnline(): Observable<boolean> {\r\n        return merge(\r\n            fromEvent(window, 'offline').pipe(map(() => false)),\r\n            fromEvent(window, 'online').pipe(map(() => true)),\r\n            of(navigator.onLine)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Monitor network connection status\r\n     */\r\n    getNetworkStatus(): Observable<{ isOnline: boolean; effectiveType?: string; downlink?: number }> {\r\n        const getConnectionInfo = () => {\r\n            const connection = (navigator as any).connection ||\r\n                (navigator as any).mozConnection ||\r\n                (navigator as any).webkitConnection;\r\n\r\n            return {\r\n                isOnline: navigator.onLine,\r\n                effectiveType: connection?.effectiveType,\r\n                downlink: connection?.downlink\r\n            };\r\n        };\r\n\r\n        return merge(\r\n            fromEvent(window, 'offline').pipe(map(() => ({ ...getConnectionInfo(), isOnline: false }))),\r\n            fromEvent(window, 'online').pipe(map(() => ({ ...getConnectionInfo(), isOnline: true }))),\r\n            of(getConnectionInfo())\r\n        );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SpeedTestService } from './services/speed-test.service';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule],\r\n  providers: [SpeedTestService]\r\n})\r\nexport class SpeedTestModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}
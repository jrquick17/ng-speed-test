export class SpeedTestResultsModel {
    constructor(fileSize) {
        this.fileSize = fileSize;
        this.duration = 0;
        this.hasEnded = false;
        this.startTime = null;
        this.endTime = null;
        this.speedBps = 0;
    }
    get speedKbps() {
        return this.speedBps / 1024;
    }
    get speedMbps() {
        return this.speedKbps / 1024;
    }
    _update() {
        if (this.endTime !== null && this.startTime !== null) {
            const milliseconds = this.endTime - this.startTime;
            if (milliseconds !== 0) {
                this.duration = milliseconds / 1000;
            }
            const bitsLoaded = this.fileSize * 8;
            this.speedBps = bitsLoaded / this.duration;
        }
    }
    end() {
        if (!this.hasEnded) {
            this.hasEnded = true;
            this.endTime = Date.now();
            this._update();
        }
    }
    error() {
        if (!this.hasEnded) {
            this.hasEnded = true;
            this.endTime = null;
            this._update();
        }
    }
    start() {
        this.startTime = Date.now();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC1yZXN1bHRzLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGVscy9zcGVlZC10ZXN0LXJlc3VsdHMubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsTUFBTSxPQUFPLHFCQUFxQjtJQU85QixZQUFvQixRQUFnQjtRQUFoQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBTjdCLGFBQVEsR0FBVyxDQUFDLENBQUM7UUFDckIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixjQUFTLEdBQWtCLElBQUksQ0FBQztRQUNoQyxZQUFPLEdBQWtCLElBQUksQ0FBQztRQUM5QixhQUFRLEdBQVcsQ0FBQyxDQUFDO0lBRVcsQ0FBQztJQUV4QyxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQ2hDLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDVCxPQUFPLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQ2pDLENBQUM7SUFFTyxPQUFPO1FBQ1gsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ25ELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuRCxJQUFJLFlBQVksS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDckIsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3hDLENBQUM7WUFDRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQy9DLENBQUM7SUFDTCxDQUFDO0lBRUQsR0FBRztRQUNDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ25CLENBQUM7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3BlZWRUZXN0UmVzdWx0cyB7XG4gICAgZHVyYXRpb246IG51bWJlcjtcbiAgICBoYXNFbmRlZDogYm9vbGVhbjtcbiAgICBzdGFydFRpbWU6IG51bWJlciB8IG51bGw7XG4gICAgZW5kVGltZTogbnVtYmVyIHwgbnVsbDtcbiAgICBzcGVlZEJwczogbnVtYmVyO1xuICAgIHNwZWVkS2JwczogbnVtYmVyO1xuICAgIHNwZWVkTWJwczogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgU3BlZWRUZXN0UmVzdWx0c01vZGVsIGltcGxlbWVudHMgU3BlZWRUZXN0UmVzdWx0cyB7XG4gICAgcHVibGljIGR1cmF0aW9uOiBudW1iZXIgPSAwO1xuICAgIHB1YmxpYyBoYXNFbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICAgIHB1YmxpYyBzdGFydFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICAgIHB1YmxpYyBlbmRUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgICBwdWJsaWMgc3BlZWRCcHM6IG51bWJlciA9IDA7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGZpbGVTaXplOiBudW1iZXIpIHt9XG5cbiAgICBnZXQgc3BlZWRLYnBzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWVkQnBzIC8gMTAyNDtcbiAgICB9XG5cbiAgICBnZXQgc3BlZWRNYnBzKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwZWVkS2JwcyAvIDEwMjQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBfdXBkYXRlKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5lbmRUaW1lICE9PSBudWxsICYmIHRoaXMuc3RhcnRUaW1lICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBtaWxsaXNlY29uZHMgPSB0aGlzLmVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICAgICAgICAgIGlmIChtaWxsaXNlY29uZHMgIT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmR1cmF0aW9uID0gbWlsbGlzZWNvbmRzIC8gMTAwMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGJpdHNMb2FkZWQgPSB0aGlzLmZpbGVTaXplICogODtcbiAgICAgICAgICAgIHRoaXMuc3BlZWRCcHMgPSBiaXRzTG9hZGVkIC8gdGhpcy5kdXJhdGlvbjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVuZCgpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhc0VuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmhhc0VuZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGVycm9yKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuaGFzRW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaGFzRW5kZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5lbmRUaW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc3RhcnQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB9XG59XG4iXX0=
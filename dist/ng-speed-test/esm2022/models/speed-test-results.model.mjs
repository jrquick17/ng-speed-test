export class SpeedTestResultsModel {
    constructor(fileSize) {
        this.fileSize = fileSize;
        this.duration = 0;
        this.hasEnded = false;
        this.startTime = null;
        this.endTime = null;
        this.speedBps = 0;
    }
    get speedKbps() {
        return this.speedBps / 1024;
    }
    get speedMbps() {
        return this.speedKbps / 1024;
    }
    _update() {
        if (this.endTime !== null && this.startTime !== null) {
            const milliseconds = this.endTime - this.startTime;
            if (milliseconds !== 0) {
                this.duration = milliseconds / 1000;
            }
            const bitsLoaded = this.fileSize * 8;
            this.speedBps = bitsLoaded / this.duration;
        }
    }
    end() {
        if (!this.hasEnded) {
            this.hasEnded = true;
            this.endTime = Date.now();
            this._update();
        }
    }
    error() {
        if (!this.hasEnded) {
            this.hasEnded = true;
            this.endTime = null;
            this._update();
        }
    }
    start() {
        this.startTime = Date.now();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlZWQtdGVzdC1yZXN1bHRzLm1vZGVsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3JjL21vZGVscy9zcGVlZC10ZXN0LXJlc3VsdHMubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBVUEsTUFBTSxPQUFPLHFCQUFxQjtJQU9oQyxZQUFvQixRQUFnQjtRQUFoQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBTjdCLGFBQVEsR0FBVyxDQUFDLENBQUM7UUFDckIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUMxQixjQUFTLEdBQWtCLElBQUksQ0FBQztRQUNoQyxZQUFPLEdBQWtCLElBQUksQ0FBQztRQUM5QixhQUFRLEdBQVcsQ0FBQyxDQUFDO0lBRVcsQ0FBQztJQUV4QyxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO0lBQy9CLENBQUM7SUFFTyxPQUFPO1FBQ2IsSUFBSSxJQUFJLENBQUMsT0FBTyxLQUFLLElBQUksSUFBSSxJQUFJLENBQUMsU0FBUyxLQUFLLElBQUksRUFBRSxDQUFDO1lBQ3JELE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNuRCxJQUFJLFlBQVksS0FBSyxDQUFDLEVBQUUsQ0FBQztnQkFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3RDLENBQUM7WUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQztZQUNyQyxJQUFJLENBQUMsUUFBUSxHQUFHLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzdDLENBQUM7SUFDSCxDQUFDO0lBRUQsR0FBRztRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDMUIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7WUFDcEIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2pCLENBQUM7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDO0lBQzlCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3BlZWRUZXN0UmVzdWx0cyB7XG4gIGR1cmF0aW9uOiBudW1iZXI7XG4gIGhhc0VuZGVkOiBib29sZWFuO1xuICBzdGFydFRpbWU6IG51bWJlciB8IG51bGw7XG4gIGVuZFRpbWU6IG51bWJlciB8IG51bGw7XG4gIHNwZWVkQnBzOiBudW1iZXI7XG4gIHNwZWVkS2JwczogbnVtYmVyO1xuICBzcGVlZE1icHM6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFNwZWVkVGVzdFJlc3VsdHNNb2RlbCBpbXBsZW1lbnRzIFNwZWVkVGVzdFJlc3VsdHMge1xuICBwdWJsaWMgZHVyYXRpb246IG51bWJlciA9IDA7XG4gIHB1YmxpYyBoYXNFbmRlZDogYm9vbGVhbiA9IGZhbHNlO1xuICBwdWJsaWMgc3RhcnRUaW1lOiBudW1iZXIgfCBudWxsID0gbnVsbDtcbiAgcHVibGljIGVuZFRpbWU6IG51bWJlciB8IG51bGwgPSBudWxsO1xuICBwdWJsaWMgc3BlZWRCcHM6IG51bWJlciA9IDA7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmaWxlU2l6ZTogbnVtYmVyKSB7fVxuXG4gIGdldCBzcGVlZEticHMoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5zcGVlZEJwcyAvIDEwMjQ7XG4gIH1cblxuICBnZXQgc3BlZWRNYnBzKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuc3BlZWRLYnBzIC8gMTAyNDtcbiAgfVxuXG4gIHByaXZhdGUgX3VwZGF0ZSgpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5lbmRUaW1lICE9PSBudWxsICYmIHRoaXMuc3RhcnRUaW1lICE9PSBudWxsKSB7XG4gICAgICBjb25zdCBtaWxsaXNlY29uZHMgPSB0aGlzLmVuZFRpbWUgLSB0aGlzLnN0YXJ0VGltZTtcbiAgICAgIGlmIChtaWxsaXNlY29uZHMgIT09IDApIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiA9IG1pbGxpc2Vjb25kcyAvIDEwMDA7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGJpdHNMb2FkZWQgPSB0aGlzLmZpbGVTaXplICogODtcbiAgICAgIHRoaXMuc3BlZWRCcHMgPSBiaXRzTG9hZGVkIC8gdGhpcy5kdXJhdGlvbjtcbiAgICB9XG4gIH1cblxuICBlbmQoKTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLmhhc0VuZGVkKSB7XG4gICAgICB0aGlzLmhhc0VuZGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZW5kVGltZSA9IERhdGUubm93KCk7XG4gICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG4gIH1cblxuICBlcnJvcigpOiB2b2lkIHtcbiAgICBpZiAoIXRoaXMuaGFzRW5kZWQpIHtcbiAgICAgIHRoaXMuaGFzRW5kZWQgPSB0cnVlO1xuICAgICAgdGhpcy5lbmRUaW1lID0gbnVsbDtcbiAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXJ0KCk6IHZvaWQge1xuICAgIHRoaXMuc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgfVxufVxuIl19